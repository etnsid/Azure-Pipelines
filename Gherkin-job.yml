parameters:
  pesterVersion: ''
  specDirectory: '$(Build.SourcesDirectory)/Specs'
  requiredModulesPath: RequiredModules.psd1
  artifactName: ''
  artifactDownloadDirectory: '$(Build.ArtifactStagingDirectory)'
  additionalModulePaths: []
  codeCoverageDirectory: ''
  dependsOn: []
  includeTag: []
  excludeTag: []
  cleanJob: ''
  show: 'All'
  strategy:
    parallel: 1
  pool:
    name: 'PowerShellModules'

jobs:
  - job: PesterGherkin
    dependsOn: ${{ parameters.dependsOn }}
    ${{ if ne(parameters.cleanJob, '') }}:
      workspace:
        clean: ${{ parameters.cleanJob }}

    strategy: ${{ parameters.strategy }}
    pool: ${{ parameters.pool }}

    variables:
      CodeCoverageDirectory: ${{ parameters.codeCoverageDirectory }}

    steps:
    - checkout: self # re-checkout, because we don't package tests
      fetchDepth: 1  # we only need the current tests
      lfs: true

    - template: Install-RequiredModule-step.yml
      parameters:
        path: $(Build.SourcesDirectory)/${{ parameters.requiredModulesPath }}

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Build Artifacts'
      condition: ${{ ne('', parameters.artifactName)}}
      inputs:
        artifactName: ${{ parameters.artifactName }}
        downloadPath: ${{ parameters.artifactDownloadDirectory }}

    - pwsh: |
        $AdditionalModulePaths = @(if("${{ parameters.artifactName }}"){"${{ parameters.artifactDownloadDirectory }}"}) +
            @("${{ join('", "', parameters.additionalModulePaths) }}") -join [IO.Path]::PathSeparator
        Write-Host "##vso[task.setvariable variable=AdditionalModulePaths]$AdditionalModulePaths"
        if(!"$(CodeCoverageDirectory)" -and "${{ parameters.artifactName }}") {
            Write-Host "##vso[task.setvariable variable=CodeCoverageDirectory]${{ parameters.artifactDownloadDirectory }}"
        }
      displayName: 'Combine paths'

    - template: Gherkin-step.yml
      parameters:
        pesterVersion: ${{ parameters.pesterVersion }}
        specDirectory: ${{ parameters.specDirectory }}
        includeTag: ${{ parameters.includeTag }}
        excludeTag: ${{ parameters.excludeTag }}
        additionalModulePaths: $(AdditionalModulePaths)
        codeCoverageDirectory: $(CodeCoverageDirectory)
        show: ${{ parameters.show }}